CREATE DATABASE MCDONALS_ORDER_DB;
USE MCDONALS_ORDER_DB;

CREATE TABLE CUSTOMERS(
	CUSTOMER_ID INT PRIMARY KEY,
    CUSTOMER_NAME VARCHAR(100),
    PHONE_NUMBER VARCHAR(20),
    ADDRESS VARCHAR(200)
);

CREATE TABLE ORDERS(
	ORDER_ID INT PRIMARY KEY,
    ORDER_DATE DATETIME,
    TOTAL_PRICE INT,
    CUSTOMER_ID INT,
    FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS (CUSTOMER_ID)
);

INSERT INTO CUSTOMERS
VALUES (1, '김철수', '010-1234-5678', '서울시 강남구'),
	   (2, '이영희', '010-9876-5432', '경기도 성남시'),
	   (3, '박지성', '010-1111-2222', '맨체스터'),
	   (4, '최민수', '010-3333-4444', '서울시 서초구'),
	   (5, '강호동', '010-5555-6666', '부산시 해운대구');
       
INSERT INTO ORDERS
VALUES (1, '2023-10-27 12:00:00', 1080, 1),
	   (2, '2023-10-27 18:30:00', 850, 2),
	   (3, '2023-10-28 10:00:00', 1500, 1),
	   (4, '2023-10-28 15:00:00', 1200, 3),
	   (5, '2023-10-29 12:00:00', 900, 4),
	   (6, '2023-10-29 18:00:00', 2000, 1),
	   (7, '2023-10-30 11:00:00', 1100, 5),
	   (8, '2023-10-30 19:00:00', 1300, 2);
       
SELECT ORDER_ID, CUSTOMER_NAME, ORDER_DATE, TOTAL_PRICE
FROM CUSTOMERS C
JOIN ORDERS O
ON C.CUSTOMER_ID = O.CUSTOMER_ID;

SELECT ORDER_ID, ORDER_DATE, TOTAL_PRICE FROM ORDERS O
LEFT JOIN CUSTOMERS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE CUSTOMER_NAME = '김철수';

SELECT SUM(TOTAL_PRICE), C.CUSTOMER_ID
FROM ORDERS O
JOIN CUSTOMERS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE O.CUSTOMER_ID
GROUP BY C.CUSTOMER_ID;

SELECT CUSTOMER_NAME, COUNT(O.CUSTOMER_ID) AS ORDERS_COUNT
FROM ORDERS O
JOIN CUSTOMERS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID
GROUP BY CUSTOMER_NAME
ORDER BY ORDERS_COUNT DESC
LIMIT 1;

SELECT ORDER_ID, ORDER_DATE, TOTAL_PRICE
FROM ORDERS O
JOIN CUSTOMERS C
ON C.CUSTOMER_ID = O.CUSTOMER_ID
WHERE ADDRESS LIKE '서울%';

CREATE DATABASE MOVIE_REVIEW_DB;
USE MOVIE_REVIEW_DB;

CREATE TABLE MOVIES(
	MOVIE_ID INT PRIMARY KEY,
    TITLE VARCHAR(100),
    GENRE VARCHAR(50),
    RELEASE_YEAR INT
);

CREATE TABLE REVIEWS(
	REVIEW_ID INT PRIMARY KEY,
    MOVIE_ID INT,
    GENRE VARCHAR(100),
    RATING INT,
    REVIEW_TEXT TEXT,
    FOREIGN KEY (MOVIE_ID) REFERENCES MOVIES (MOVIE_ID)
);

INSERT INTO MOVIES
VALUES (1, '어벤져스: 엔드게임', '액션', 2019),
	   (2, '기생충', '드라마', 2019),
	   (3, '인터스텔라', 'SF', 2014),
	   (4, '라라랜드', '뮤지컬', 2016);
       
INSERT INTO REVIEWS
VALUES (1, 1, '김철수', 5, '최고의 액션 영화!'),
	   (2, 2, '이영희', 4, '몰입감 최고!'),
	   (3, 3, '박지성', 5, '시간 가는 줄 몰랐어요.'),
       (4, 1, '최민수', 3, '액션은 좋았지만 스토리는 아쉬움.'),
       (5, 4, '강호동', 4, '음악과 영상미가 아름다운 영화.'),
       (6, 2, '유재석', 5, '봉준호 감독 최고!');
       
SELECT * FROM REVIEWS R
JOIN MOVIES M
ON M.MOVIE_ID = R.MOVIE_ID
WHERE TITLE = '어벤져스: 엔드게임';

SELECT TITLE, REVIEW_TEXT
FROM REVIEWS R
JOIN MOVIES M
ON M.MOVIE_ID = R.MOVIE_ID
WHERE RELEASE_YEAR = 2019;

SELECT TITLE, REVIEW_TEXT
FROM REVIEWS R
JOIN MOVIES M
ON M.MOVIE_ID = R.MOVIE_ID
WHERE RELEASE_YEAR = 2019;

SELECT USER_NAME, REVIEW_TEXT
FROM REVIEWS
WHERE RATING >= 4;

SELECT AVG(RATING) AS AVG_RATING
FROM REVIEWS R
JOIN MOVIES M
ON M.MOVIE_ID = R.MOVIE_ID
WHERE GENRE = '드라마';

SELECT TITLE, COUNT(REVIEW_ID) AS REVIEW_COUNT
FROM REVIEWS R
JOIN MOVIES M
ON M.MOVIE_ID = R.MOVIE_ID
GROUP BY TITLE
ORDER BY REVIEW_COUNT DESC
LIMIT 1;

SELECT USER_NAME, REVIEW_TEXT
FROM REVIEWS
WHERE USER_NAME LIKE '김%';

SELECT TITLE, AVG(RATING) AS AVG_RATING
FROM REVIEWS R
JOIN MOVIES M
ON M.MOVIE_ID = R.MOVIE_ID
WHERE GENRE = 'SF' OR GENRE = '뮤지컬'
GROUP BY TITLE;

SELECT TITLE, COUNT(REVIEW_ID) AS REVIEW_COUNT
FROM REVIEWS R
JOIN MOVIES M
ON M.MOVIE_ID = R.MOVIE_ID
GROUP BY TITLE
HAVING COUNT(REVIEW_ID) >= 2;

CREATE DATABASE ONLINE_COURSE_DB;
USE ONLINE_COURSE_DB;

CREATE TABLE COURSES(
	COURSE_ID INT PRIMARY KEY,
    COURSE_NAME VARCHAR(100),
    INSTRUCTOR VARCHAR(100),
    CATEGORY VARCHAR(50)
);

CREATE TABLE STUDENTS(
	STUDENT_ID INT PRIMARY KEY,
    STUDENT_NAME VARCHAR(100),
    EMAIL VARCHAR(100),
    PHONE_NUMBER VARCHAR(20)
);

CREATE TABLE ENROLLMENTS(
	ENROLLMENT_ID INT PRIMARY KEY,
    COURSE_ID INT,
    STUDENT_ID INT,
    ENROLLMENT_DATE DATE,
    COMPLETION_DATE DATE,
    FOREIGN KEY (COURSE_ID) REFERENCES COURSES (COURSE_ID),
    FOREIGN KEY (STUDENT_ID) REFERENCES STUDENTS (STUDENT_ID)
);

INSERT INTO COURSES
VALUES (1, '파이썬 기초', '김철수', '프로그래밍'),
	   (2, '데이터 분석 입문', '이영희', '데이터 과학'),
       (3, '웹 개발 기초', '박지성', '웹 개발'),
       (4, '머신러닝 기초', '최민수', '인공지능');
       
INSERT INTO STUDENTS
VALUES (1, '강호동', 'hodong@email.com', '010-1234-5678'),
	   (2, '유재석', 'jaesuk@email.com', '010-9876-5432'),
       (3, '신동엽', 'dongyeop@email.com', '010-1111-2222'),
       (4, '이효리', 'hyori@email.com', '010-3333-4444');
       
INSERT INTO ENROLLMENTS
VALUES (1, 1, 1, '2023-11-01', '2023-11-15'),
	   (2, 2, 2, '2023-11-02', '2023-11-16'),
       (3, 1, 3, '2023-11-03', NULL),
       (4, 3, 4, '2023-11-04', '2023-11-18');

SELECT STUDENT_NAME, ENROLLMENT_DATE
FROM ENROLLMENTS E
JOIN STUDENTS S
ON E.STUDENT_ID = S.STUDENT_ID
WHERE COURSE_ID = 1;

SELECT STUDENT_NAME, COURSE_NAME
FROM ENROLLMENTS E
JOIN STUDENTS S ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON C.COURSE_ID = E.COURSE_ID
WHERE ENROLLMENT_DATE = '2023-11-03';

SELECT STUDENT_NAME
FROM ENROLLMENTS E
JOIN STUDENTS S ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON C.COURSE_ID = E.COURSE_ID
WHERE CATEGORY = '데이터 과학';

SELECT COURSE_NAME, ENROLLMENT_DATE
FROM ENROLLMENTS E
JOIN STUDENTS S ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON C.COURSE_ID = E.COURSE_ID
WHERE COMPLETION_DATE IS NULL;

SELECT COURSE_NAME, COUNT(E.STUDENT_ID) AS COUNT_STUDENT
FROM ENROLLMENTS E
JOIN STUDENTS S ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON C.COURSE_ID = E.COURSE_ID
GROUP BY COURSE_NAME
ORDER BY COUNT_STUDENT DESC
LIMIT 1;

SELECT STUDENT_NAME
FROM ENROLLMENTS E
JOIN STUDENTS S ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON C.COURSE_ID = E.COURSE_ID
WHERE INSTRUCTOR LIKE "김%";

SELECT STUDENT_NAME
FROM ENROLLMENTS E
JOIN STUDENTS S ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON C.COURSE_ID = E.COURSE_ID
WHERE CATEGORY = "프로그래밍" OR CATEGORY = "인공지능";

SELECT COURSE_NAME, COUNT(E.STUDENT_ID) AS COUNT_STUDENT
FROM ENROLLMENTS E
JOIN STUDENTS S ON S.STUDENT_ID = E.STUDENT_ID
JOIN COURSES C ON C.COURSE_ID = E.COURSE_ID
GROUP BY COURSE_NAME
HAVING COUNT_STUDENT >= 2;

